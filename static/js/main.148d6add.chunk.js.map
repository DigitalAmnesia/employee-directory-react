{"version":3,"sources":["Table.js","App.js","index.js"],"names":["Table","columns","data","useState","filterInput","setFilterInput","useTable","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","className","value","onChange","e","target","handleFilterChange","placeholder","type","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","App","loadingData","setLoadingData","useMemo","Header","accessor","sortType","setData","useEffect","a","axios","get","then","response","console","log","getData","results","ReactDOM","StrictMode","document","getElementById"],"mappings":"4QAkGeA,MA3Ff,YAAmC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAAQ,EAEQC,mBAAS,IAFjB,mBAEvBC,EAFuB,KAEVC,EAFU,OAY1BC,mBACA,CACIL,UACAC,QAEJK,aACAC,aAZAC,EAN0B,EAM1BA,cACAC,EAP0B,EAO1BA,kBACAC,EAR0B,EAQ1BA,aACAC,EAT0B,EAS1BA,KACAC,EAV0B,EAU1BA,WACAC,EAX0B,EAW1BA,UAkBJ,OACI,qCACI,qBAAKC,UAAU,eAAf,SACI,uBACIC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAZC,SAACA,GACxB,IAAMF,EAAQE,EAAEC,OAAOH,OAAS,GAEhCF,EAAU,YAAaE,GACvBX,EAAeW,GAQcI,CAAmBF,IACpCG,YAAa,sBACbC,KAAK,OACLP,UAAU,mBAGlB,uBACA,gDAAOA,UAAU,wBAA2BN,KAA5C,cACI,gCACKE,EAAaY,KAAI,SAACC,GAAD,OACd,8CAAQA,EAAYC,uBAApB,aACKD,EAAYE,QAAQH,KAAI,SAACI,GAAD,OACrB,+CACQA,EAAOC,eACPD,EAAOE,yBAFf,cAKKF,EAAOG,OAAO,UACf,iCACK,IACAH,EAAOI,SAEJJ,EAAOK,aACH,cAAC,IAAD,IAEA,cAAC,IAAD,IAGJ,GACD,sBAO3B,iDAAWtB,KAAX,aACKE,EAAKW,KAAI,SAACU,GAEP,OADApB,EAAWoB,GAEP,8CAAQA,EAAIC,eAAZ,aACKD,EAAIE,MAAMZ,KAAI,SAACa,GACZ,OACI,8CAAQA,EAAKC,gBAAb,aACKD,EAAKN,OAAO,+B,MCV1CQ,MAtEf,WAAe,MAEyBnC,oBAAS,GAFlC,mBAENoC,EAFM,KAEOC,EAFP,KAIPvC,EAAUwC,mBACd,iBAAM,CACF,CACIC,OAAQ,aACRC,SAAU,cAEd,CACID,OAAQ,YACRC,SAAU,aAEd,CACID,OAAQ,SACRC,SAAU,UAEd,CACID,OAAQ,MACRC,SAAU,UACVC,SAAU,SAEd,CACIF,OAAQ,gBACRC,SAAU,SAEd,CACID,OAAQ,eACRC,SAAU,QACVC,SAAU,SAEd,CACIF,OAAQ,UACRC,SAAU,uBAGlB,IArCW,EAwCWxC,mBAAS,IAxCpB,mBAwCND,EAxCM,KAwCA2C,EAxCA,KA2Db,OAjBAC,qBAAU,WAAM,4CACd,sBAAAC,EAAA,sEACUC,IACDC,IAAI,yCACJC,MAAK,SAACC,GACHN,EAAQM,EAASjD,MACjBsC,GAAe,GACfY,QAAQC,IAAIF,EAASjD,SANjC,4CADc,sBAUVqC,GAVW,WAAD,wBAWVe,KAGH,IAID,qBAAKvC,UAAU,kBAAf,SACSwB,EACG,6CAGF,cAAC,EAAD,CAAOtC,QAASA,EAASC,KAAMA,EAAKqD,a,MCjElDC,IAAS1B,OACP,cAAC,IAAM2B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.148d6add.chunk.js","sourcesContent":["//bringing in react-table and using table, sortby & filter options\r\nimport { useTable, useSortBy, useFilters } from 'react-table';\r\nimport { useState } from 'react';\r\n//bringing in the down/up arrow icons\r\nimport { FaChevronDown } from 'react-icons/fa';\r\nimport { FaChevronUp } from 'react-icons/fa';\r\n\r\nfunction Table({ columns, data }) {\r\n    //state for the input field to filter item\r\n    const [filterInput, setFilterInput] = useState('');\r\n\r\n    //some boiler plate\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n        setFilter\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data\r\n        },\r\n        useFilters,\r\n        useSortBy\r\n    );\r\n    \r\n    //handle the input controlled  component\r\n    const handleFilterChange = (e) => {\r\n        const value = e.target.value || '';\r\n        //bring in the results object from the api and filter by name.last\r\n        setFilter('name.last', value);\r\n        setFilterInput(value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className='col-lg-3 p-0'>\r\n                <input\r\n                    value={filterInput}\r\n                    onChange={(e) => handleFilterChange(e)}\r\n                    placeholder={'Search by Last Name'}\r\n                    type='text'\r\n                    className='form-control'\r\n                />\r\n            </div>\r\n            <br />\r\n            <table className='table table-bordered' {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th\r\n                                    {...column.getHeaderProps(\r\n                                        column.getSortByToggleProps()\r\n                                    )}\r\n                                >\r\n                                    {column.render('Header')}\r\n                                    <span>\r\n                                        {' '}\r\n                                        {column.isSorted ? (\r\n                                            //changed icons out to something that looks a littler cleaner\r\n                                            column.isSortedDesc ? (\r\n                                                <FaChevronDown />\r\n                                            ) : (\r\n                                                <FaChevronUp />\r\n                                            )\r\n                                        ) : (\r\n                                            ''\r\n                                        )}{' '}\r\n                                    </span>\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row) => {\r\n                        prepareRow(row);\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return (\r\n                                        <td {...cell.getCellProps()}>\r\n                                            {cell.render('Cell')}\r\n                                        </td>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Table;","import { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport Table from './Table';\nimport './App.css';\n\nfunction App() {\n  //init the loading  state to true\n  const [loadingData, setLoadingData] = useState(true);\n\n  const columns = useMemo(\n    () => [\n        {\n            Header: 'First Name',\n            accessor: 'name.first'\n        },\n        {\n            Header: 'Last Name',\n            accessor: 'name.last'\n        },\n        {\n            Header: 'Gender',\n            accessor: 'gender'\n        },\n        {\n            Header: 'Age',\n            accessor: 'dob.age',\n            sortType: 'basic'\n        },\n        {\n            Header: 'Email Address',\n            accessor: 'email'\n        },\n        {\n            Header: 'Phone Number',\n            accessor: 'phone',\n            sortType: 'basic'\n        },\n        {\n            Header: 'Country',\n            accessor: 'location.country'\n        }\n    ],\n    []\n);\n\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    async function getData() {\n        await axios\n            .get('https://randomuser.me/api/?results=50')\n            .then((response) => {\n                setData(response.data);\n                setLoadingData(false);\n                console.log(response.data);\n            });\n    }\n    if (loadingData) {\n        getData();\n    }\n    //and...this time...only run it once or you get rate banned again...\n  }, []);\n\n\n  return (\n    <div className='table-container'>\n            {loadingData ? (\n                <div>Loading...</div>\n            ) : (\n              //replacing the place holder...\n              <Table columns={columns} data={data.results} />\n            )}\n        </div>\n    )\n  }\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}